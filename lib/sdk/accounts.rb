# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class Accounts
    extend T::Sig
    sig { params(sdk: OpenApiSDK::SDK, client: Faraday::Connection, server_url: String, sdk_version: String, gen_version: String).void }
    def initialize(sdk, client, server_url, sdk_version, gen_version)
      @sdk = sdk
      @client = client
      @server_url = server_url
      @sdk_version = sdk_version
      @gen_version = gen_version
    end
sig { params(request: T.nilable(Operations::AddMetadataToAccountRequest)).returns(Utils::FieldAugmented) }
    def add_metadata_to_account(request)
    # add_metadata_to_account - Add metadata to an account
      base_url = @server_url
      url = Utils.generate_url(
        Operations::AddMetadataToAccountRequest,
        base_url,
        '/api/ledger/{ledger}/accounts/{address}/metadata',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?

      r = @client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AddMetadataToAccountResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 204
      else
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ErrorResponse)
          res.error_response = out
        end
      end
      res
    end
sig { params(request: T.nilable(Operations::CountAccountsRequest)).returns(Utils::FieldAugmented) }
    def count_accounts(request)
    # count_accounts - Count the accounts from a ledger
      base_url = @server_url
      url = Utils.generate_url(
        Operations::CountAccountsRequest,
        base_url,
        '/api/ledger/{ledger}/accounts',
        request
      )
      query_params = Utils.get_query_params(Operations::CountAccountsRequest, request)

      r = @client.head(url) do |req|
        req.params = query_params
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::CountAccountsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        res.headers = r.headers
      else
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ErrorResponse)
          res.error_response = out
        end
      end
      res
    end
sig { params(request: T.nilable(Operations::GetAccountRequest)).returns(Utils::FieldAugmented) }
    def get_account(request)
    # get_account - Get account by its address
      base_url = @server_url
      url = Utils.generate_url(
        Operations::GetAccountRequest,
        base_url,
        '/api/ledger/{ledger}/accounts/{address}',
        request
      )

      r = @client.get(url) do |req|
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetAccountResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::AccountResponse)
          res.account_response = out
        end
      else
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ErrorResponse)
          res.error_response = out
        end
      end
      res
    end
sig { params(request: T.nilable(Operations::ListAccountsRequest)).returns(Utils::FieldAugmented) }
    def list_accounts(request)
    # list_accounts - List accounts from a ledger
    # List accounts from a ledger, sorted by address in descending order.
      base_url = @server_url
      url = Utils.generate_url(
        Operations::ListAccountsRequest,
        base_url,
        '/api/ledger/{ledger}/accounts',
        request
      )
      query_params = Utils.get_query_params(Operations::ListAccountsRequest, request)

      r = @client.get(url) do |req|
        req.params = query_params
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::ListAccountsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::AccountsCursorResponse)
          res.accounts_cursor_response = out
        end
      else
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ErrorResponse)
          res.error_response = out
        end
      end
      res
    end
  end
end

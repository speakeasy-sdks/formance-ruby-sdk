# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class Transactions
    extend T::Sig
    sig { params(sdk: OpenApiSDK::SDK, client: Faraday::Connection, server_url: String, sdk_version: String, gen_version: String).void }
    def initialize(sdk, client, server_url, sdk_version, gen_version)
      @sdk = sdk
      @client = client
      @server_url = server_url
      @sdk_version = sdk_version
      @gen_version = gen_version
    end
sig { params(request: T.nilable(Operations::CreateTransactionsRequest)).returns(Utils::FieldAugmented) }
    def create_transactions(request)
    # create_transactions - Create a new batch of transactions to a ledger
      base_url = @server_url
      url = Utils.generate_url(
        Operations::CreateTransactionsRequest,
        base_url,
        '/api/ledger/{ledger}/transactions/batch',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :transactions, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?

      r = @client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::CreateTransactionsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::TransactionsResponse)
          res.transactions_response = out
        end
      else
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ErrorResponse)
          res.error_response = out
        end
      end
      res
    end
sig { params(request: T.nilable(Operations::AddMetadataOnTransactionRequest)).returns(Utils::FieldAugmented) }
    def add_metadata_on_transaction(request)
    # add_metadata_on_transaction - Set the metadata of a transaction by its ID
      base_url = @server_url
      url = Utils.generate_url(
        Operations::AddMetadataOnTransactionRequest,
        base_url,
        '/api/ledger/{ledger}/transactions/{txid}/metadata',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type

      r = @client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AddMetadataOnTransactionResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 204
      else
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ErrorResponse)
          res.error_response = out
        end
      end
      res
    end
sig { params(request: T.nilable(Operations::CountTransactionsRequest)).returns(Utils::FieldAugmented) }
    def count_transactions(request)
    # count_transactions - Count the transactions from a ledger
      base_url = @server_url
      url = Utils.generate_url(
        Operations::CountTransactionsRequest,
        base_url,
        '/api/ledger/{ledger}/transactions',
        request
      )
      query_params = Utils.get_query_params(Operations::CountTransactionsRequest, request)

      r = @client.head(url) do |req|
        req.params = query_params
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::CountTransactionsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        res.headers = r.headers
      else
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ErrorResponse)
          res.error_response = out
        end
      end
      res
    end
sig { params(request: T.nilable(Operations::CreateTransactionRequest)).returns(Utils::FieldAugmented) }
    def create_transaction(request)
    # create_transaction - Create a new transaction to a ledger
      base_url = @server_url
      url = Utils.generate_url(
        Operations::CreateTransactionRequest,
        base_url,
        '/api/ledger/{ledger}/transactions',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :post_transaction, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      query_params = Utils.get_query_params(Operations::CreateTransactionRequest, request)

      r = @client.post(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::CreateTransactionResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::TransactionsResponse)
          res.transactions_response = out
        end
      else
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ErrorResponse)
          res.error_response = out
        end
      end
      res
    end
sig { params(request: T.nilable(Operations::GetTransactionRequest)).returns(Utils::FieldAugmented) }
    def get_transaction(request)
    # get_transaction - Get transaction from a ledger by its ID
      base_url = @server_url
      url = Utils.generate_url(
        Operations::GetTransactionRequest,
        base_url,
        '/api/ledger/{ledger}/transactions/{txid}',
        request
      )

      r = @client.get(url) do |req|
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetTransactionResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::TransactionResponse)
          res.transaction_response = out
        end
      else
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ErrorResponse)
          res.error_response = out
        end
      end
      res
    end
sig { params(request: T.nilable(Operations::ListTransactionsRequest)).returns(Utils::FieldAugmented) }
    def list_transactions(request)
    # list_transactions - List transactions from a ledger
    # List transactions from a ledger, sorted by txid in descending order.
      base_url = @server_url
      url = Utils.generate_url(
        Operations::ListTransactionsRequest,
        base_url,
        '/api/ledger/{ledger}/transactions',
        request
      )
      query_params = Utils.get_query_params(Operations::ListTransactionsRequest, request)

      r = @client.get(url) do |req|
        req.params = query_params
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::ListTransactionsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::TransactionsCursorResponse)
          res.transactions_cursor_response = out
        end
      else
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ErrorResponse)
          res.error_response = out
        end
      end
      res
    end
sig { params(request: T.nilable(Operations::RevertTransactionRequest)).returns(Utils::FieldAugmented) }
    def revert_transaction(request)
    # revert_transaction - Revert a ledger transaction by its ID
      base_url = @server_url
      url = Utils.generate_url(
        Operations::RevertTransactionRequest,
        base_url,
        '/api/ledger/{ledger}/transactions/{txid}/revert',
        request
      )

      r = @client.post(url) do |req|
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::RevertTransactionResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::TransactionResponse)
          res.transaction_response = out
        end
      else
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ErrorResponse)
          res.error_response = out
        end
      end
      res
    end
  end
end

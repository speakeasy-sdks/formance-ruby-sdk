# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class Webhooks
    extend T::Sig
    sig { params(sdk: OpenApiSDK::SDK, client: Faraday::Connection, server_url: String, sdk_version: String, gen_version: String).void }
    def initialize(sdk, client, server_url, sdk_version, gen_version)
      @sdk = sdk
      @client = client
      @server_url = server_url
      @sdk_version = sdk_version
      @gen_version = gen_version
    end
sig { params(request: T.nilable(Operations::ActivateConfigRequest)).returns(Utils::FieldAugmented) }
    def activate_config(request)
    # activate_config - Activate one config
    # Activate a webhooks config by ID, to start receiving webhooks to its endpoint.
      base_url = @server_url
      url = Utils.generate_url(
        Operations::ActivateConfigRequest,
        base_url,
        '/api/webhooks/configs/{id}/activate',
        request
      )

      r = @client.put(url) do |req|
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::ActivateConfigResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ConfigResponse)
          res.config_response = out
        end
      elsif r.status == 304
      end
      res
    end
sig { params(request: T.nilable(Operations::ChangeConfigSecretRequest)).returns(Utils::FieldAugmented) }
    def change_config_secret(request)
    # change_config_secret - Change the signing secret of a config
    # Change the signing secret of the endpoint of a webhooks config.
    # 
    # If not passed or empty, a secret is automatically generated.
    # The format is a random string of bytes of size 24, base64 encoded. (larger size after encoding)
    # 
      base_url = @server_url
      url = Utils.generate_url(
        Operations::ChangeConfigSecretRequest,
        base_url,
        '/api/webhooks/configs/{id}/secret/change',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :config_change_secret, :json)
      headers['content-type'] = req_content_type

      r = @client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::ChangeConfigSecretResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ConfigResponse)
          res.config_response = out
        end
      end
      res
    end
sig { params(request: T.nilable(Operations::DeactivateConfigRequest)).returns(Utils::FieldAugmented) }
    def deactivate_config(request)
    # deactivate_config - Deactivate one config
    # Deactivate a webhooks config by ID, to stop receiving webhooks to its endpoint.
      base_url = @server_url
      url = Utils.generate_url(
        Operations::DeactivateConfigRequest,
        base_url,
        '/api/webhooks/configs/{id}/deactivate',
        request
      )

      r = @client.put(url) do |req|
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::DeactivateConfigResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ConfigResponse)
          res.config_response = out
        end
      elsif r.status == 304
      end
      res
    end
sig { params(request: T.nilable(Operations::DeleteConfigRequest)).returns(Utils::FieldAugmented) }
    def delete_config(request)
    # delete_config - Delete one config
    # Delete a webhooks config by ID.
      base_url = @server_url
      url = Utils.generate_url(
        Operations::DeleteConfigRequest,
        base_url,
        '/api/webhooks/configs/{id}',
        request
      )

      r = @client.delete(url) do |req|
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::DeleteConfigResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
      end
      res
    end
sig { params(request: T.nilable(Operations::GetManyConfigsRequest)).returns(Utils::FieldAugmented) }
    def get_many_configs(request)
    # get_many_configs - Get many configs
    # Sorted by updated date descending
      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/api/webhooks/configs"
      query_params = Utils.get_query_params(Operations::GetManyConfigsRequest, request)

      r = @client.get(url) do |req|
        req.params = query_params
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetManyConfigsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ConfigsResponse)
          res.configs_response = out
        end
      end
      res
    end
sig { params(request: T.nilable(Shared::ConfigUser)).returns(Utils::FieldAugmented) }
    def insert_config(request)
    # insert_config - Insert a new config
    # Insert a new webhooks config.
    # 
    # The endpoint should be a valid https URL and be unique.
    # 
    # The secret is the endpoint's verification secret.
    # If not passed or empty, a secret is automatically generated.
    # The format is a random string of bytes of size 24, base64 encoded. (larger size after encoding)
    # 
    # All eventTypes are converted to lower-case when inserted.
    # 
      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/api/webhooks/configs"
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?

      r = @client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::InsertConfigResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ConfigResponse)
          res.config_response = out
        end
      elsif r.status == 400
        res.insert_config_400_text_plain_string = r.env.response_body if Utils.match_content_type(content_type, 'text/plain')
      end
      res
    end
sig { params(request: T.nilable(Operations::TestConfigRequest)).returns(Utils::FieldAugmented) }
    def test_config(request)
    # test_config - Test one config
    # Test a config by sending a webhook to its endpoint.
      base_url = @server_url
      url = Utils.generate_url(
        Operations::TestConfigRequest,
        base_url,
        '/api/webhooks/configs/{id}/test',
        request
      )

      r = @client.get(url) do |req|
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::TestConfigResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::AttemptResponse)
          res.attempt_response = out
        end
      end
      res
    end
  end
end

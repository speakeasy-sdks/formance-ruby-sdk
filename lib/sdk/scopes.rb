# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class Scopes
    extend T::Sig
    sig { params(sdk: OpenApiSDK::SDK, client: Faraday::Connection, server_url: String, sdk_version: String, gen_version: String).void }
    def initialize(sdk, client, server_url, sdk_version, gen_version)
      @sdk = sdk
      @client = client
      @server_url = server_url
      @sdk_version = sdk_version
      @gen_version = gen_version
    end
sig { params(request: T.nilable(Operations::AddTransientScopeRequest)).returns(Utils::FieldAugmented) }
    def add_transient_scope(request)
    # add_transient_scope - Add a transient scope to a scope
    # Add a transient scope to a scope
      base_url = @server_url
      url = Utils.generate_url(
        Operations::AddTransientScopeRequest,
        base_url,
        '/api/auth/scopes/{scopeId}/transient/{transientScopeId}',
        request
      )

      r = @client.put(url) do |req|
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::AddTransientScopeResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 204
      end
      res
    end
sig { params(request: T.nilable(Shared::CreateScopeRequest)).returns(Utils::FieldAugmented) }
    def create_scope(request)
    # create_scope - Create scope
    # Create scope
      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/api/auth/scopes"
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request, :json)
      headers['content-type'] = req_content_type

      r = @client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::CreateScopeResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 201
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CreateScopeResponse)
          res.create_scope_response = out
        end
      end
      res
    end
sig { params(request: T.nilable(Operations::DeleteScopeRequest)).returns(Utils::FieldAugmented) }
    def delete_scope(request)
    # delete_scope - Delete scope
    # Delete scope
      base_url = @server_url
      url = Utils.generate_url(
        Operations::DeleteScopeRequest,
        base_url,
        '/api/auth/scopes/{scopeId}',
        request
      )

      r = @client.delete(url) do |req|
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::DeleteScopeResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 204
      end
      res
    end
sig { params(request: T.nilable(Operations::DeleteTransientScopeRequest)).returns(Utils::FieldAugmented) }
    def delete_transient_scope(request)
    # delete_transient_scope - Delete a transient scope from a scope
    # Delete a transient scope from a scope
      base_url = @server_url
      url = Utils.generate_url(
        Operations::DeleteTransientScopeRequest,
        base_url,
        '/api/auth/scopes/{scopeId}/transient/{transientScopeId}',
        request
      )

      r = @client.delete(url) do |req|
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::DeleteTransientScopeResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 204
      end
      res
    end
sig { returns(Utils::FieldAugmented) }
    def list_scopes
    # list_scopes - List scopes
    # List Scopes
      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/api/auth/scopes"

      r = @client.get(url) do |req|
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::ListScopesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ListScopesResponse)
          res.list_scopes_response = out
        end
      end
      res
    end
sig { params(request: T.nilable(Operations::ReadScopeRequest)).returns(Utils::FieldAugmented) }
    def read_scope(request)
    # read_scope - Read scope
    # Read scope
      base_url = @server_url
      url = Utils.generate_url(
        Operations::ReadScopeRequest,
        base_url,
        '/api/auth/scopes/{scopeId}',
        request
      )

      r = @client.get(url) do |req|
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::ReadScopeResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ReadScopeResponse)
          res.read_scope_response = out
        end
      end
      res
    end
sig { params(request: T.nilable(Operations::UpdateScopeRequest)).returns(Utils::FieldAugmented) }
    def update_scope(request)
    # update_scope - Update scope
    # Update scope
      base_url = @server_url
      url = Utils.generate_url(
        Operations::UpdateScopeRequest,
        base_url,
        '/api/auth/scopes/{scopeId}',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :update_scope_request, :json)
      headers['content-type'] = req_content_type

      r = @client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::UpdateScopeResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::UpdateScopeResponse)
          res.update_scope_response = out
        end
      end
      res
    end
  end
end

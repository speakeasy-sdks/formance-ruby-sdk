# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/error'
require_relative '../shared/runworkflowresponse'

module OpenApiSDK
  module Operations
    class RunWorkflowRequest < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

            # The flow id
      field :flow_id, String, { 'path_param': { 'field_name': 'flowId', 'style': 'simple', 'explode': false } }
      field :request_body, T.nilable(T::Hash[Symbol, String]), { 'request': { 'media_type': 'application/json' } }      # Wait end of the workflow before return
      field :wait, T.nilable(T::Boolean), { 'query_param': { 'field_name': 'wait', 'style': 'form', 'explode': true } }

      sig { params(flow_id: String, request_body: T.nilable(T::Hash[Symbol, String]), wait: T.nilable(T::Boolean)).void }
      def initialize(flow_id: nil, request_body: nil, wait: nil)
        @flow_id = flow_id
        @request_body = request_body
        @wait = wait
      end
    end

    class RunWorkflowResponse < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      
      field :content_type, String
      field :status_code, Integer      # General error
      field :error, T.nilable(Shared::Error)
      field :raw_response, T.nilable(Faraday::Response)      # The workflow occurrence
      field :run_workflow_response, T.nilable(Shared::RunWorkflowResponse)

      sig { params(content_type: String, status_code: Integer, error: T.nilable(Shared::Error), raw_response: T.nilable(Faraday::Response), run_workflow_response: T.nilable(Shared::RunWorkflowResponse)).void }
      def initialize(content_type: nil, status_code: nil, error: nil, raw_response: nil, run_workflow_response: nil)
        @content_type = content_type
        @status_code = status_code
        @error = error
        @raw_response = raw_response
        @run_workflow_response = run_workflow_response
      end
    end
  end
end

# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/posttransaction'
require_relative '../shared/errorresponse'
require_relative '../shared/transactionsresponse'

module OpenApiSDK
  module Operations
    class CreateTransactionRequest < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

            # Name of the ledger.
      field :ledger, String, { 'path_param': { 'field_name': 'ledger', 'style': 'simple', 'explode': false } }      # The request body must contain at least one of the following objects:
      #   - `postings`: suitable for simple transactions
      #   - `script`: enabling more complex transactions with Numscript
      # 
      field :post_transaction, Shared::PostTransaction, { 'request': { 'media_type': 'application/json' } }      # Set the preview mode. Preview mode doesn't add the logs to the database or publish a message to the message broker.
      field :preview, T.nilable(T::Boolean), { 'query_param': { 'field_name': 'preview', 'style': 'form', 'explode': true } }

      sig { params(ledger: String, post_transaction: Shared::PostTransaction, preview: T.nilable(T::Boolean)).void }
      def initialize(ledger: nil, post_transaction: nil, preview: nil)
        @ledger = ledger
        @post_transaction = post_transaction
        @preview = preview
      end
    end

    class CreateTransactionResponse < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      
      field :content_type, String
      field :status_code, Integer      # Error
      field :error_response, T.nilable(Shared::ErrorResponse)
      field :raw_response, T.nilable(Faraday::Response)      # OK
      field :transactions_response, T.nilable(Shared::TransactionsResponse)

      sig { params(content_type: String, status_code: Integer, error_response: T.nilable(Shared::ErrorResponse), raw_response: T.nilable(Faraday::Response), transactions_response: T.nilable(Shared::TransactionsResponse)).void }
      def initialize(content_type: nil, status_code: nil, error_response: nil, raw_response: nil, transactions_response: nil)
        @content_type = content_type
        @status_code = status_code
        @error_response = error_response
        @raw_response = raw_response
        @transactions_response = transactions_response
      end
    end
  end
end

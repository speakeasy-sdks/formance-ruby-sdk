# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/errorresponse'

module OpenApiSDK
  module Operations
    class CountTransactionsRequest < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

            # Name of the ledger.
      field :ledger, String, { 'path_param': { 'field_name': 'ledger', 'style': 'simple', 'explode': false } }      # Filter transactions with postings involving given account, either as source or destination (regular expression placed between ^ and $).
      field :account, T.nilable(String), { 'query_param': { 'field_name': 'account', 'style': 'form', 'explode': true } }      # Filter transactions with postings involving given account at destination (regular expression placed between ^ and $).
      field :destination, T.nilable(String), { 'query_param': { 'field_name': 'destination', 'style': 'form', 'explode': true } }      # Filter transactions that occurred before this timestamp.
      # The format is RFC3339 and is exclusive (for example, "2023-01-02T15:04:01Z" excludes the first second of 4th minute).
      # 
      field :end_time, T.nilable(DateTime), { 'query_param': { 'field_name': 'endTime', 'style': 'form', 'explode': true } }      # Filter transactions that occurred before this timestamp.
      # The format is RFC3339 and is exclusive (for example, "2023-01-02T15:04:01Z" excludes the first second of 4th minute).
      # Deprecated, please use `endTime` instead.
      # 
      field :end_time_deprecated, T.nilable(DateTime), { 'query_param': { 'field_name': 'end_time', 'style': 'form', 'explode': true } }      # Filter transactions by metadata key value pairs. Nested objects can be used as seen in the example below.
      field :metadata, T.nilable(T::Hash[Symbol, Object]), { 'query_param': { 'field_name': 'metadata', 'style': 'deepObject', 'explode': true } }      # Filter transactions by reference field.
      field :reference, T.nilable(String), { 'query_param': { 'field_name': 'reference', 'style': 'form', 'explode': true } }      # Filter transactions with postings involving given account at source (regular expression placed between ^ and $).
      field :source, T.nilable(String), { 'query_param': { 'field_name': 'source', 'style': 'form', 'explode': true } }      # Filter transactions that occurred after this timestamp.
      # The format is RFC3339 and is inclusive (for example, "2023-01-02T15:04:01Z" includes the first second of 4th minute).
      # 
      field :start_time, T.nilable(DateTime), { 'query_param': { 'field_name': 'startTime', 'style': 'form', 'explode': true } }      # Filter transactions that occurred after this timestamp.
      # The format is RFC3339 and is inclusive (for example, "2023-01-02T15:04:01Z" includes the first second of 4th minute).
      # Deprecated, please use `startTime` instead.
      # 
      field :start_time_deprecated, T.nilable(DateTime), { 'query_param': { 'field_name': 'start_time', 'style': 'form', 'explode': true } }

      sig { params(ledger: String, account: T.nilable(String), destination: T.nilable(String), end_time: T.nilable(DateTime), end_time_deprecated: T.nilable(DateTime), metadata: T.nilable(T::Hash[Symbol, Object]), reference: T.nilable(String), source: T.nilable(String), start_time: T.nilable(DateTime), start_time_deprecated: T.nilable(DateTime)).void }
      def initialize(ledger: nil, account: nil, destination: nil, end_time: nil, end_time_deprecated: nil, metadata: nil, reference: nil, source: nil, start_time: nil, start_time_deprecated: nil)
        @ledger = ledger
        @account = account
        @destination = destination
        @end_time = end_time
        @end_time_deprecated = end_time_deprecated
        @metadata = metadata
        @reference = reference
        @source = source
        @start_time = start_time
        @start_time_deprecated = start_time_deprecated
      end
    end

    class CountTransactionsResponse < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      
      field :content_type, String
      field :status_code, Integer      # Error
      field :error_response, T.nilable(Shared::ErrorResponse)
      field :headers, T.nilable(T::Hash[Symbol, T::Array[String]])
      field :raw_response, T.nilable(Faraday::Response)

      sig { params(content_type: String, status_code: Integer, error_response: T.nilable(Shared::ErrorResponse), headers: T.nilable(T::Hash[Symbol, T::Array[String]]), raw_response: T.nilable(Faraday::Response)).void }
      def initialize(content_type: nil, status_code: nil, error_response: nil, headers: nil, raw_response: nil)
        @content_type = content_type
        @status_code = status_code
        @error_response = error_response
        @headers = headers
        @raw_response = raw_response
      end
    end
  end
end

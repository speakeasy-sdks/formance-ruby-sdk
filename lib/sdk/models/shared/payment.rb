# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/connector_enum'
require_relative '../shared/paymentstatus_enum'

module OpenApiSDK
  module Shared

    class PaymentSchemeEnum < T::Enum
      enums do
        VISA = new('visa')
        MASTERCARD = new('mastercard')
        AMEX = new('amex')
        DINERS = new('diners')
        DISCOVER = new('discover')
        JCB = new('jcb')
        UNIONPAY = new('unionpay')
        SEPA_DEBIT = new('sepa debit')
        SEPA_CREDIT = new('sepa credit')
        SEPA = new('sepa')
        APPLE_PAY = new('apple pay')
        GOOGLE_PAY = new('google pay')
        A2A = new('a2a')
        ACH_DEBIT = new('ach debit')
        ACH = new('ach')
        RTP = new('rtp')
        UNKNOWN = new('unknown')
        OTHER = new('other')
      end
    end



    class PaymentTypeEnum < T::Enum
      enums do
        PAY_IN = new('PAY-IN')
        PAYOUT = new('PAYOUT')
        TRANSFER = new('TRANSFER')
        OTHER = new('OTHER')
      end
    end


    class Payment < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      
      field :account_id, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('accountID') } }
      field :adjustments, T::Array[PaymentAdjustment], { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('adjustments') } }
      field :asset, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('asset') } }
      field :created_at, DateTime, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('createdAt'), 'decoder': Utils.datetime_from_iso_format(false) } }
      field :id, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('id') } }
      field :initial_amount, Integer, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('initialAmount') } }
      field :metadata, T::Array[PaymentMetadata], { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('metadata') } }
      field :provider, ConnectorEnum, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('provider'), 'decoder': Utils.enum_from_string(Shared::ConnectorEnum, false) } }
      field :raw, T::Hash[Symbol, Object], { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('raw') } }
      field :reference, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('reference') } }
      field :scheme, PaymentSchemeEnum, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('scheme'), 'decoder': Utils.enum_from_string(Shared::PaymentSchemeEnum, false) } }
      field :status, PaymentStatusEnum, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(Shared::PaymentStatusEnum, false) } }
      field :type, PaymentTypeEnum, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(Shared::PaymentTypeEnum, false) } }

      sig { params(account_id: String, adjustments: T::Array[PaymentAdjustment], asset: String, created_at: DateTime, id: String, initial_amount: Integer, metadata: T::Array[PaymentMetadata], provider: ConnectorEnum, raw: T::Hash[Symbol, Object], reference: String, scheme: PaymentSchemeEnum, status: PaymentStatusEnum, type: PaymentTypeEnum).void }
      def initialize(account_id: nil, adjustments: nil, asset: nil, created_at: nil, id: nil, initial_amount: nil, metadata: nil, provider: nil, raw: nil, reference: nil, scheme: nil, status: nil, type: nil)
        @account_id = account_id
        @adjustments = adjustments
        @asset = asset
        @created_at = created_at
        @id = id
        @initial_amount = initial_amount
        @metadata = metadata
        @provider = provider
        @raw = raw
        @reference = reference
        @scheme = scheme
        @status = status
        @type = type
      end
    end
  end
end

# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module OpenApiSDK
  module Shared
    class ResponseCursorTotal < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      
      field :relation, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('relation') } }
      field :value, T.nilable(Integer), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('value') } }

      sig { params(relation: T.nilable(String), value: T.nilable(Integer)).void }
      def initialize(relation: nil, value: nil)
        @relation = relation
        @value = value
      end
    end

    class ResponseCursor < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      
      field :data, T.nilable(T::Array[T::Hash[Symbol, Object]]), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('data') } }
      field :has_more, T.nilable(T::Boolean), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('hasMore') } }
      field :next_, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('next') } }
      field :page_size, T.nilable(Integer), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('pageSize') } }
      field :previous, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('previous') } }
      field :total, T.nilable(ResponseCursorTotal), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('total') } }

      sig { params(data: T.nilable(T::Array[T::Hash[Symbol, Object]]), has_more: T.nilable(T::Boolean), next_: T.nilable(String), page_size: T.nilable(Integer), previous: T.nilable(String), total: T.nilable(ResponseCursorTotal)).void }
      def initialize(data: nil, has_more: nil, next_: nil, page_size: nil, previous: nil, total: nil)
        @data = data
        @has_more = has_more
        @next_ = next_
        @page_size = page_size
        @previous = previous
        @total = total
      end
    end
# 2 - Success
    class Response < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      
      field :cursor, T.nilable(ResponseCursor), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('cursor') } }      # The payload
      field :data, T.nilable(T::Hash[Symbol, Object]), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('data') } }

      sig { params(cursor: T.nilable(ResponseCursor), data: T.nilable(T::Hash[Symbol, Object])).void }
      def initialize(cursor: nil, data: nil)
        @cursor = cursor
        @data = data
      end
    end
  end
end

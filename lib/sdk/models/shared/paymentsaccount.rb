# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/connector_enum'

module OpenApiSDK
  module Shared

    class PaymentsAccountTypeEnum < T::Enum
      enums do
        TARGET = new('TARGET')
        SOURCE = new('SOURCE')
      end
    end


    class PaymentsAccount < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      
      field :created_at, DateTime, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('createdAt'), 'decoder': Utils.datetime_from_iso_format(false) } }
      field :id, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('id') } }
      field :provider, ConnectorEnum, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('provider'), 'decoder': Utils.enum_from_string(Shared::ConnectorEnum, false) } }
      field :reference, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('reference') } }
      field :type, PaymentsAccountTypeEnum, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(Shared::PaymentsAccountTypeEnum, false) } }

      sig { params(created_at: DateTime, id: String, provider: ConnectorEnum, reference: String, type: PaymentsAccountTypeEnum).void }
      def initialize(created_at: nil, id: nil, provider: nil, reference: nil, type: nil)
        @created_at = created_at
        @id = id
        @provider = provider
        @reference = reference
        @type = type
      end
    end
  end
end

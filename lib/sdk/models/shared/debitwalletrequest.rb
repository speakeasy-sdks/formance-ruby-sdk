# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/monetary'

module OpenApiSDK
  module Shared
    class DebitWalletRequest < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      
      field :amount, Monetary, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('amount') } }
      field :balances, T.nilable(T::Array[String]), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('balances') } }
      field :description, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('description') } }
      field :destination, T.nilable(Object), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('destination') } }      # Metadata associated with the wallet.
      field :metadata, T.nilable(T::Hash[Symbol, Object]), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('metadata') } }      # Set to true to create a pending hold. If false, the wallet will be debited immediately.
      field :pending, T.nilable(T::Boolean), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('pending') } }

      sig { params(amount: Monetary, balances: T.nilable(T::Array[String]), description: T.nilable(String), destination: T.nilable(Object), metadata: T.nilable(T::Hash[Symbol, Object]), pending: T.nilable(T::Boolean)).void }
      def initialize(amount: nil, balances: nil, description: nil, destination: nil, metadata: nil, pending: nil)
        @amount = amount
        @balances = balances
        @description = description
        @destination = destination
        @metadata = metadata
        @pending = pending
      end
    end
  end
end

# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module OpenApiSDK
  module Shared
    class Query < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      
      field :after, T.nilable(T::Array[String]), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('after') } }
      field :cursor, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('cursor') } }
      field :ledgers, T.nilable(T::Array[String]), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('ledgers') } }
      field :page_size, T.nilable(Integer), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('pageSize') } }
      field :policy, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('policy') } }
      field :sort, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('sort') } }
      field :target, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('target') } }
      field :terms, T.nilable(T::Array[String]), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('terms') } }

      sig { params(after: T.nilable(T::Array[String]), cursor: T.nilable(String), ledgers: T.nilable(T::Array[String]), page_size: T.nilable(Integer), policy: T.nilable(String), sort: T.nilable(String), target: T.nilable(String), terms: T.nilable(T::Array[String])).void }
      def initialize(after: nil, cursor: nil, ledgers: nil, page_size: nil, policy: nil, sort: nil, target: nil, terms: nil)
        @after = after
        @cursor = cursor
        @ledgers = ledgers
        @page_size = page_size
        @policy = policy
        @sort = sort
        @target = target
        @terms = terms
      end
    end
  end
end

# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module OpenApiSDK
  module Shared
    class Transaction < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      
      field :postings, T::Array[Posting], { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('postings') } }
      field :timestamp, DateTime, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('timestamp'), 'decoder': Utils.datetime_from_iso_format(false) } }
      field :txid, Integer, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('txid') } }
      field :metadata, T.nilable(T::Hash[Symbol, Object]), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('metadata') } }
      field :post_commit_volumes, T.nilable(T::Hash[Symbol, T::Hash[Symbol, Volume]]), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('postCommitVolumes') } }
      field :pre_commit_volumes, T.nilable(T::Hash[Symbol, T::Hash[Symbol, Volume]]), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('preCommitVolumes') } }
      field :reference, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('reference') } }

      sig { params(postings: T::Array[Posting], timestamp: DateTime, txid: Integer, metadata: T.nilable(T::Hash[Symbol, Object]), post_commit_volumes: T.nilable(T::Hash[Symbol, T::Hash[Symbol, Volume]]), pre_commit_volumes: T.nilable(T::Hash[Symbol, T::Hash[Symbol, Volume]]), reference: T.nilable(String)).void }
      def initialize(postings: nil, timestamp: nil, txid: nil, metadata: nil, post_commit_volumes: nil, pre_commit_volumes: nil, reference: nil)
        @postings = postings
        @timestamp = timestamp
        @txid = txid
        @metadata = metadata
        @post_commit_volumes = post_commit_volumes
        @pre_commit_volumes = pre_commit_volumes
        @reference = reference
      end
    end
  end
end

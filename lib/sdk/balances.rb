# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class Balances
    extend T::Sig
    sig { params(sdk: OpenApiSDK::SDK, client: Faraday::Connection, server_url: String, sdk_version: String, gen_version: String).void }
    def initialize(sdk, client, server_url, sdk_version, gen_version)
      @sdk = sdk
      @client = client
      @server_url = server_url
      @sdk_version = sdk_version
      @gen_version = gen_version
    end
sig { params(request: T.nilable(Operations::GetBalancesRequest)).returns(Utils::FieldAugmented) }
    def get_balances(request)
    # get_balances - Get the balances from a ledger's account
      base_url = @server_url
      url = Utils.generate_url(
        Operations::GetBalancesRequest,
        base_url,
        '/api/ledger/{ledger}/balances',
        request
      )
      query_params = Utils.get_query_params(Operations::GetBalancesRequest, request)

      r = @client.get(url) do |req|
        req.params = query_params
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetBalancesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::BalancesCursorResponse)
          res.balances_cursor_response = out
        end
      else
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ErrorResponse)
          res.error_response = out
        end
      end
      res
    end
sig { params(request: T.nilable(Operations::GetBalancesAggregatedRequest)).returns(Utils::FieldAugmented) }
    def get_balances_aggregated(request)
    # get_balances_aggregated - Get the aggregated balances from selected accounts
      base_url = @server_url
      url = Utils.generate_url(
        Operations::GetBalancesAggregatedRequest,
        base_url,
        '/api/ledger/{ledger}/aggregate/balances',
        request
      )
      query_params = Utils.get_query_params(Operations::GetBalancesAggregatedRequest, request)

      r = @client.get(url) do |req|
        req.params = query_params
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetBalancesAggregatedResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::AggregateBalancesResponse)
          res.aggregate_balances_response = out
        end
      else
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ErrorResponse)
          res.error_response = out
        end
      end
      res
    end
  end
end

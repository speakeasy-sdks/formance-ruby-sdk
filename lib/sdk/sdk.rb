# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'
module OpenApiSDK
  extend T::Sig
  SERVERS = [
    'http://localhost',
    'https://{organization}.sandbox.formance.cloud'
  ].freeze
  class SDK
    extend T::Sig

    attr_accessor :accounts, :balances, :clients, :ledger, :logs, :mapping, :orchestration, :payments, :scopes, :script, :search, :server, :stats, :transactions, :users, :wallets, :webhooks

    attr_accessor :security, :sdk_version, :gen_version

    sig { params(security: Shared::Security,
                 server_url: String,
                 url_params: T::Hash[Symbol, String],
                 client: Faraday::Request).void }
    def initialize(security: nil,
                 server_url: nil,
                 url_params: nil,
                 client: nil
                 )
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
      @client = Faraday.new(request: {
                              params_encoder: Faraday::FlatParamsEncoder
                            }) do |f|
        f.request :multipart, {}
        # f.response :logger
      end

      


      @security = nil
      @server_url = SERVERS[0]
      @sdk_version = '0.0.1'
      @gen_version = 'internal'
      init_sdks
    end

    sig { params(server_url: String, params: T.nilable(T::Hash[Symbol, String])).void }
    def config_server_url(server_url, params)
      if params.nil?
        @server_url = server_url
      else
        @server_url = Utils.template_url(server_url, params)
      end
      init_sdks
    end

    sig { params(security: Shared::Security).void }
    def config_security(security)
      @security = security
    end

    sig { void }
    def init_sdks
      @accounts = Accounts.new(
        self,
        @client,
        @server_url,
        @sdk_version,
        @gen_version
      )
      @balances = Balances.new(
        self,
        @client,
        @server_url,
        @sdk_version,
        @gen_version
      )
      @clients = Clients.new(
        self,
        @client,
        @server_url,
        @sdk_version,
        @gen_version
      )
      @ledger = Ledger.new(
        self,
        @client,
        @server_url,
        @sdk_version,
        @gen_version
      )
      @logs = Logs.new(
        self,
        @client,
        @server_url,
        @sdk_version,
        @gen_version
      )
      @mapping = Mapping.new(
        self,
        @client,
        @server_url,
        @sdk_version,
        @gen_version
      )
      @orchestration = Orchestration.new(
        self,
        @client,
        @server_url,
        @sdk_version,
        @gen_version
      )
      @payments = Payments.new(
        self,
        @client,
        @server_url,
        @sdk_version,
        @gen_version
      )
      @scopes = Scopes.new(
        self,
        @client,
        @server_url,
        @sdk_version,
        @gen_version
      )
      @script = Script.new(
        self,
        @client,
        @server_url,
        @sdk_version,
        @gen_version
      )
      @search = Search.new(
        self,
        @client,
        @server_url,
        @sdk_version,
        @gen_version
      )
      @server = Server.new(
        self,
        @client,
        @server_url,
        @sdk_version,
        @gen_version
      )
      @stats = Stats.new(
        self,
        @client,
        @server_url,
        @sdk_version,
        @gen_version
      )
      @transactions = Transactions.new(
        self,
        @client,
        @server_url,
        @sdk_version,
        @gen_version
      )
      @users = Users.new(
        self,
        @client,
        @server_url,
        @sdk_version,
        @gen_version
      )
      @wallets = Wallets.new(
        self,
        @client,
        @server_url,
        @sdk_version,
        @gen_version
      )
      @webhooks = Webhooks.new(
        self,
        @client,
        @server_url,
        @sdk_version,
        @gen_version
      )
    end

    sig { returns(Utils::FieldAugmented) }
    def get_server_info
    # get_server_info - Get server info
      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/api/auth/_info"

      r = @client.get(url) do |req|
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetServerInfoResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ServerInfo)
          res.server_info = out
        end
      end
      res
    end

    sig { returns(Utils::FieldAugmented) }
    def paymentsget_server_info
    # paymentsget_server_info - Get server info
      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/api/payments/_info"

      r = @client.get(url) do |req|
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::PaymentsgetServerInfoResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ServerInfo)
          res.server_info = out
        end
      end
      res
    end

    sig { returns(Utils::FieldAugmented) }
    def searchget_server_info
    # searchget_server_info - Get server info
      base_url = @server_url
      url = "#{base_url.delete_suffix('/')}/api/search/_info"

      r = @client.get(url) do |req|
        Utils.configure_request_security(req, @sdk.security) if !@sdk.nil? && !@sdk.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::SearchgetServerInfoResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::ServerInfo)
          res.server_info = out
        end
      end
      res
    end
  end
end
